// Code generated by mockery v2.53.3. DO NOT EDIT.

package media

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "pinstack-post-service/internal/domain/models"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Attach provides a mock function with given fields: ctx, postID, media
func (_m *Repository) Attach(ctx context.Context, postID int64, media []*model.PostMedia) error {
	ret := _m.Called(ctx, postID, media)

	if len(ret) == 0 {
		panic("no return value specified for Attach")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []*model.PostMedia) error); ok {
		r0 = rf(ctx, postID, media)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Attach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attach'
type Repository_Attach_Call struct {
	*mock.Call
}

// Attach is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int64
//   - media []*model.PostMedia
func (_e *Repository_Expecter) Attach(ctx interface{}, postID interface{}, media interface{}) *Repository_Attach_Call {
	return &Repository_Attach_Call{Call: _e.mock.On("Attach", ctx, postID, media)}
}

func (_c *Repository_Attach_Call) Run(run func(ctx context.Context, postID int64, media []*model.PostMedia)) *Repository_Attach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]*model.PostMedia))
	})
	return _c
}

func (_c *Repository_Attach_Call) Return(_a0 error) *Repository_Attach_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Attach_Call) RunAndReturn(run func(context.Context, int64, []*model.PostMedia) error) *Repository_Attach_Call {
	_c.Call.Return(run)
	return _c
}

// Detach provides a mock function with given fields: ctx, mediaIDs
func (_m *Repository) Detach(ctx context.Context, mediaIDs []int64) error {
	ret := _m.Called(ctx, mediaIDs)

	if len(ret) == 0 {
		panic("no return value specified for Detach")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) error); ok {
		r0 = rf(ctx, mediaIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Detach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Detach'
type Repository_Detach_Call struct {
	*mock.Call
}

// Detach is a helper method to define mock.On call
//   - ctx context.Context
//   - mediaIDs []int64
func (_e *Repository_Expecter) Detach(ctx interface{}, mediaIDs interface{}) *Repository_Detach_Call {
	return &Repository_Detach_Call{Call: _e.mock.On("Detach", ctx, mediaIDs)}
}

func (_c *Repository_Detach_Call) Run(run func(ctx context.Context, mediaIDs []int64)) *Repository_Detach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *Repository_Detach_Call) Return(_a0 error) *Repository_Detach_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Detach_Call) RunAndReturn(run func(context.Context, []int64) error) *Repository_Detach_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPost provides a mock function with given fields: ctx, postID
func (_m *Repository) GetByPost(ctx context.Context, postID int64) ([]*model.PostMedia, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetByPost")
	}

	var r0 []*model.PostMedia
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*model.PostMedia, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.PostMedia); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PostMedia)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetByPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPost'
type Repository_GetByPost_Call struct {
	*mock.Call
}

// GetByPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int64
func (_e *Repository_Expecter) GetByPost(ctx interface{}, postID interface{}) *Repository_GetByPost_Call {
	return &Repository_GetByPost_Call{Call: _e.mock.On("GetByPost", ctx, postID)}
}

func (_c *Repository_GetByPost_Call) Run(run func(ctx context.Context, postID int64)) *Repository_GetByPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_GetByPost_Call) Return(_a0 []*model.PostMedia, _a1 error) *Repository_GetByPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetByPost_Call) RunAndReturn(run func(context.Context, int64) ([]*model.PostMedia, error)) *Repository_GetByPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPosts provides a mock function with given fields: ctx, postIDs
func (_m *Repository) GetByPosts(ctx context.Context, postIDs []int64) (map[int64][]*model.PostMedia, error) {
	ret := _m.Called(ctx, postIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetByPosts")
	}

	var r0 map[int64][]*model.PostMedia
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) (map[int64][]*model.PostMedia, error)); ok {
		return rf(ctx, postIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) map[int64][]*model.PostMedia); ok {
		r0 = rf(ctx, postIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64][]*model.PostMedia)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, postIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetByPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPosts'
type Repository_GetByPosts_Call struct {
	*mock.Call
}

// GetByPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - postIDs []int64
func (_e *Repository_Expecter) GetByPosts(ctx interface{}, postIDs interface{}) *Repository_GetByPosts_Call {
	return &Repository_GetByPosts_Call{Call: _e.mock.On("GetByPosts", ctx, postIDs)}
}

func (_c *Repository_GetByPosts_Call) Run(run func(ctx context.Context, postIDs []int64)) *Repository_GetByPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *Repository_GetByPosts_Call) Return(_a0 map[int64][]*model.PostMedia, _a1 error) *Repository_GetByPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetByPosts_Call) RunAndReturn(run func(context.Context, []int64) (map[int64][]*model.PostMedia, error)) *Repository_GetByPosts_Call {
	_c.Call.Return(run)
	return _c
}

// Reorder provides a mock function with given fields: ctx, postID, newPositions
func (_m *Repository) Reorder(ctx context.Context, postID int64, newPositions map[int64]int) error {
	ret := _m.Called(ctx, postID, newPositions)

	if len(ret) == 0 {
		panic("no return value specified for Reorder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, map[int64]int) error); ok {
		r0 = rf(ctx, postID, newPositions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Reorder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reorder'
type Repository_Reorder_Call struct {
	*mock.Call
}

// Reorder is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int64
//   - newPositions map[int64]int
func (_e *Repository_Expecter) Reorder(ctx interface{}, postID interface{}, newPositions interface{}) *Repository_Reorder_Call {
	return &Repository_Reorder_Call{Call: _e.mock.On("Reorder", ctx, postID, newPositions)}
}

func (_c *Repository_Reorder_Call) Run(run func(ctx context.Context, postID int64, newPositions map[int64]int)) *Repository_Reorder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(map[int64]int))
	})
	return _c
}

func (_c *Repository_Reorder_Call) Return(_a0 error) *Repository_Reorder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Reorder_Call) RunAndReturn(run func(context.Context, int64, map[int64]int) error) *Repository_Reorder_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
