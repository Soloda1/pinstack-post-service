// Code generated by mockery v2.53.3. DO NOT EDIT.

package post

import (
	context "context"
	model "pinstack-post-service/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function with given fields: ctx, post
func (_m *Service) CreatePost(ctx context.Context, post *model.CreatePostDTO) (*model.PostDetailed, error) {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *model.PostDetailed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreatePostDTO) (*model.PostDetailed, error)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreatePostDTO) *model.PostDetailed); ok {
		r0 = rf(ctx, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostDetailed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreatePostDTO) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type Service_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - post *model.CreatePostDTO
func (_e *Service_Expecter) CreatePost(ctx interface{}, post interface{}) *Service_CreatePost_Call {
	return &Service_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, post)}
}

func (_c *Service_CreatePost_Call) Run(run func(ctx context.Context, post *model.CreatePostDTO)) *Service_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.CreatePostDTO))
	})
	return _c
}

func (_c *Service_CreatePost_Call) Return(_a0 *model.PostDetailed, _a1 error) *Service_CreatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_CreatePost_Call) RunAndReturn(run func(context.Context, *model.CreatePostDTO) (*model.PostDetailed, error)) *Service_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, userID, id
func (_m *Service) DeletePost(ctx context.Context, userID int64, id int64) error {
	ret := _m.Called(ctx, userID, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type Service_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - id int64
func (_e *Service_Expecter) DeletePost(ctx interface{}, userID interface{}, id interface{}) *Service_DeletePost_Call {
	return &Service_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, userID, id)}
}

func (_c *Service_DeletePost_Call) Run(run func(ctx context.Context, userID int64, id int64)) *Service_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *Service_DeletePost_Call) Return(_a0 error) *Service_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeletePost_Call) RunAndReturn(run func(context.Context, int64, int64) error) *Service_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostByID provides a mock function with given fields: ctx, id
func (_m *Service) GetPostByID(ctx context.Context, id int64) (*model.PostDetailed, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 *model.PostDetailed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.PostDetailed, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.PostDetailed); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostDetailed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetPostByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostByID'
type Service_GetPostByID_Call struct {
	*mock.Call
}

// GetPostByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Service_Expecter) GetPostByID(ctx interface{}, id interface{}) *Service_GetPostByID_Call {
	return &Service_GetPostByID_Call{Call: _e.mock.On("GetPostByID", ctx, id)}
}

func (_c *Service_GetPostByID_Call) Run(run func(ctx context.Context, id int64)) *Service_GetPostByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Service_GetPostByID_Call) Return(_a0 *model.PostDetailed, _a1 error) *Service_GetPostByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetPostByID_Call) RunAndReturn(run func(context.Context, int64) (*model.PostDetailed, error)) *Service_GetPostByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListPosts provides a mock function with given fields: ctx, filters
func (_m *Service) ListPosts(ctx context.Context, filters *model.PostFilters) ([]*model.PostDetailed, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for ListPosts")
	}

	var r0 []*model.PostDetailed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PostFilters) ([]*model.PostDetailed, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.PostFilters) []*model.PostDetailed); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PostDetailed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.PostFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_ListPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPosts'
type Service_ListPosts_Call struct {
	*mock.Call
}

// ListPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - filters *model.PostFilters
func (_e *Service_Expecter) ListPosts(ctx interface{}, filters interface{}) *Service_ListPosts_Call {
	return &Service_ListPosts_Call{Call: _e.mock.On("ListPosts", ctx, filters)}
}

func (_c *Service_ListPosts_Call) Run(run func(ctx context.Context, filters *model.PostFilters)) *Service_ListPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.PostFilters))
	})
	return _c
}

func (_c *Service_ListPosts_Call) Return(_a0 []*model.PostDetailed, _a1 error) *Service_ListPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_ListPosts_Call) RunAndReturn(run func(context.Context, *model.PostFilters) ([]*model.PostDetailed, error)) *Service_ListPosts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function with given fields: ctx, userID, id, post
func (_m *Service) UpdatePost(ctx context.Context, userID int64, id int64, post *model.UpdatePostDTO) error {
	ret := _m.Called(ctx, userID, id, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, *model.UpdatePostDTO) error); ok {
		r0 = rf(ctx, userID, id, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type Service_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - id int64
//   - post *model.UpdatePostDTO
func (_e *Service_Expecter) UpdatePost(ctx interface{}, userID interface{}, id interface{}, post interface{}) *Service_UpdatePost_Call {
	return &Service_UpdatePost_Call{Call: _e.mock.On("UpdatePost", ctx, userID, id, post)}
}

func (_c *Service_UpdatePost_Call) Run(run func(ctx context.Context, userID int64, id int64, post *model.UpdatePostDTO)) *Service_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(*model.UpdatePostDTO))
	})
	return _c
}

func (_c *Service_UpdatePost_Call) Return(_a0 error) *Service_UpdatePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UpdatePost_Call) RunAndReturn(run func(context.Context, int64, int64, *model.UpdatePostDTO) error) *Service_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
