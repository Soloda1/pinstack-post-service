// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "pinstack-post-service/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, post
func (_m *Repository) Create(ctx context.Context, post *model.Post) (*model.Post, error) {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Post) (*model.Post, error)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Post) *model.Post); ok {
		r0 = rf(ctx, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - post *model.Post
func (_e *Repository_Expecter) Create(ctx interface{}, post interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", ctx, post)}
}

func (_c *Repository_Create_Call) Run(run func(ctx context.Context, post *model.Post)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Post))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 *model.Post, _a1 error) *Repository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, *model.Post) (*model.Post, error)) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Repository_Expecter) Delete(ctx interface{}, id interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Repository_Delete_Call) Run(run func(ctx context.Context, id int64)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *Repository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAuthor provides a mock function with given fields: ctx, authorID
func (_m *Repository) GetByAuthor(ctx context.Context, authorID int64) ([]*model.Post, error) {
	ret := _m.Called(ctx, authorID)

	if len(ret) == 0 {
		panic("no return value specified for GetByAuthor")
	}

	var r0 []*model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*model.Post, error)); ok {
		return rf(ctx, authorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.Post); ok {
		r0 = rf(ctx, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetByAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAuthor'
type Repository_GetByAuthor_Call struct {
	*mock.Call
}

// GetByAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - authorID int64
func (_e *Repository_Expecter) GetByAuthor(ctx interface{}, authorID interface{}) *Repository_GetByAuthor_Call {
	return &Repository_GetByAuthor_Call{Call: _e.mock.On("GetByAuthor", ctx, authorID)}
}

func (_c *Repository_GetByAuthor_Call) Run(run func(ctx context.Context, authorID int64)) *Repository_GetByAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_GetByAuthor_Call) Return(_a0 []*model.Post, _a1 error) *Repository_GetByAuthor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetByAuthor_Call) RunAndReturn(run func(context.Context, int64) ([]*model.Post, error)) *Repository_GetByAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByID(ctx context.Context, id int64) (*model.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type Repository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Repository_Expecter) GetByID(ctx interface{}, id interface{}) *Repository_GetByID_Call {
	return &Repository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *Repository_GetByID_Call) Run(run func(ctx context.Context, id int64)) *Repository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_GetByID_Call) Return(_a0 *model.Post, _a1 error) *Repository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*model.Post, error)) *Repository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filters
func (_m *Repository) List(ctx context.Context, filters model.PostFilters) ([]*model.Post, int, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*model.Post
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PostFilters) ([]*model.Post, int, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PostFilters) []*model.Post); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PostFilters) int); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.PostFilters) error); ok {
		r2 = rf(ctx, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Repository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Repository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filters model.PostFilters
func (_e *Repository_Expecter) List(ctx interface{}, filters interface{}) *Repository_List_Call {
	return &Repository_List_Call{Call: _e.mock.On("List", ctx, filters)}
}

func (_c *Repository_List_Call) Run(run func(ctx context.Context, filters model.PostFilters)) *Repository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.PostFilters))
	})
	return _c
}

func (_c *Repository_List_Call) Return(_a0 []*model.Post, _a1 int, _a2 error) *Repository_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Repository_List_Call) RunAndReturn(run func(context.Context, model.PostFilters) ([]*model.Post, int, error)) *Repository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, update
func (_m *Repository) Update(ctx context.Context, id int64, update *model.UpdatePostDTO) (*model.Post, error) {
	ret := _m.Called(ctx, id, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *model.UpdatePostDTO) (*model.Post, error)); ok {
		return rf(ctx, id, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *model.UpdatePostDTO) *model.Post); ok {
		r0 = rf(ctx, id, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *model.UpdatePostDTO) error); ok {
		r1 = rf(ctx, id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - update *model.UpdatePostDTO
func (_e *Repository_Expecter) Update(ctx interface{}, id interface{}, update interface{}) *Repository_Update_Call {
	return &Repository_Update_Call{Call: _e.mock.On("Update", ctx, id, update)}
}

func (_c *Repository_Update_Call) Run(run func(ctx context.Context, id int64, update *model.UpdatePostDTO)) *Repository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*model.UpdatePostDTO))
	})
	return _c
}

func (_c *Repository_Update_Call) Return(_a0 *model.Post, _a1 error) *Repository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Update_Call) RunAndReturn(run func(context.Context, int64, *model.UpdatePostDTO) (*model.Post, error)) *Repository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
