// Code generated by mockery v2.53.3. DO NOT EDIT.

package tag

import (
	context "context"
	model "pinstack-post-service/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, name
func (_m *Repository) Create(ctx context.Context, name string) (*model.Tag, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Tag, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Tag); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *Repository_Expecter) Create(ctx interface{}, name interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", ctx, name)}
}

func (_c *Repository_Create_Call) Run(run func(ctx context.Context, name string)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 *model.Tag, _a1 error) *Repository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, string) (*model.Tag, error)) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUnused provides a mock function with given fields: ctx
func (_m *Repository) DeleteUnused(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUnused")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteUnused_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUnused'
type Repository_DeleteUnused_Call struct {
	*mock.Call
}

// DeleteUnused is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) DeleteUnused(ctx interface{}) *Repository_DeleteUnused_Call {
	return &Repository_DeleteUnused_Call{Call: _e.mock.On("DeleteUnused", ctx)}
}

func (_c *Repository_DeleteUnused_Call) Run(run func(ctx context.Context)) *Repository_DeleteUnused_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_DeleteUnused_Call) Return(_a0 error) *Repository_DeleteUnused_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_DeleteUnused_Call) RunAndReturn(run func(context.Context) error) *Repository_DeleteUnused_Call {
	_c.Call.Return(run)
	return _c
}

// FindByNames provides a mock function with given fields: ctx, names
func (_m *Repository) FindByNames(ctx context.Context, names []string) ([]*model.Tag, error) {
	ret := _m.Called(ctx, names)

	if len(ret) == 0 {
		panic("no return value specified for FindByNames")
	}

	var r0 []*model.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*model.Tag, error)); ok {
		return rf(ctx, names)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*model.Tag); ok {
		r0 = rf(ctx, names)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, names)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindByNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByNames'
type Repository_FindByNames_Call struct {
	*mock.Call
}

// FindByNames is a helper method to define mock.On call
//   - ctx context.Context
//   - names []string
func (_e *Repository_Expecter) FindByNames(ctx interface{}, names interface{}) *Repository_FindByNames_Call {
	return &Repository_FindByNames_Call{Call: _e.mock.On("FindByNames", ctx, names)}
}

func (_c *Repository_FindByNames_Call) Run(run func(ctx context.Context, names []string)) *Repository_FindByNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *Repository_FindByNames_Call) Return(_a0 []*model.Tag, _a1 error) *Repository_FindByNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindByNames_Call) RunAndReturn(run func(context.Context, []string) ([]*model.Tag, error)) *Repository_FindByNames_Call {
	_c.Call.Return(run)
	return _c
}

// FindByPost provides a mock function with given fields: ctx, postID
func (_m *Repository) FindByPost(ctx context.Context, postID int64) ([]*model.Tag, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for FindByPost")
	}

	var r0 []*model.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*model.Tag, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.Tag); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindByPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByPost'
type Repository_FindByPost_Call struct {
	*mock.Call
}

// FindByPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int64
func (_e *Repository_Expecter) FindByPost(ctx interface{}, postID interface{}) *Repository_FindByPost_Call {
	return &Repository_FindByPost_Call{Call: _e.mock.On("FindByPost", ctx, postID)}
}

func (_c *Repository_FindByPost_Call) Run(run func(ctx context.Context, postID int64)) *Repository_FindByPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_FindByPost_Call) Return(_a0 []*model.Tag, _a1 error) *Repository_FindByPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindByPost_Call) RunAndReturn(run func(context.Context, int64) ([]*model.Tag, error)) *Repository_FindByPost_Call {
	_c.Call.Return(run)
	return _c
}

// ReplacePostTags provides a mock function with given fields: ctx, postID, newTags
func (_m *Repository) ReplacePostTags(ctx context.Context, postID int64, newTags []string) error {
	ret := _m.Called(ctx, postID, newTags)

	if len(ret) == 0 {
		panic("no return value specified for ReplacePostTags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []string) error); ok {
		r0 = rf(ctx, postID, newTags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_ReplacePostTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplacePostTags'
type Repository_ReplacePostTags_Call struct {
	*mock.Call
}

// ReplacePostTags is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int64
//   - newTags []string
func (_e *Repository_Expecter) ReplacePostTags(ctx interface{}, postID interface{}, newTags interface{}) *Repository_ReplacePostTags_Call {
	return &Repository_ReplacePostTags_Call{Call: _e.mock.On("ReplacePostTags", ctx, postID, newTags)}
}

func (_c *Repository_ReplacePostTags_Call) Run(run func(ctx context.Context, postID int64, newTags []string)) *Repository_ReplacePostTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]string))
	})
	return _c
}

func (_c *Repository_ReplacePostTags_Call) Return(_a0 error) *Repository_ReplacePostTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_ReplacePostTags_Call) RunAndReturn(run func(context.Context, int64, []string) error) *Repository_ReplacePostTags_Call {
	_c.Call.Return(run)
	return _c
}

// TagPost provides a mock function with given fields: ctx, postID, tagNames
func (_m *Repository) TagPost(ctx context.Context, postID int64, tagNames []string) error {
	ret := _m.Called(ctx, postID, tagNames)

	if len(ret) == 0 {
		panic("no return value specified for TagPost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []string) error); ok {
		r0 = rf(ctx, postID, tagNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_TagPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagPost'
type Repository_TagPost_Call struct {
	*mock.Call
}

// TagPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int64
//   - tagNames []string
func (_e *Repository_Expecter) TagPost(ctx interface{}, postID interface{}, tagNames interface{}) *Repository_TagPost_Call {
	return &Repository_TagPost_Call{Call: _e.mock.On("TagPost", ctx, postID, tagNames)}
}

func (_c *Repository_TagPost_Call) Run(run func(ctx context.Context, postID int64, tagNames []string)) *Repository_TagPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]string))
	})
	return _c
}

func (_c *Repository_TagPost_Call) Return(_a0 error) *Repository_TagPost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_TagPost_Call) RunAndReturn(run func(context.Context, int64, []string) error) *Repository_TagPost_Call {
	_c.Call.Return(run)
	return _c
}

// UntagPost provides a mock function with given fields: ctx, postID, tagNames
func (_m *Repository) UntagPost(ctx context.Context, postID int64, tagNames []string) error {
	ret := _m.Called(ctx, postID, tagNames)

	if len(ret) == 0 {
		panic("no return value specified for UntagPost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []string) error); ok {
		r0 = rf(ctx, postID, tagNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UntagPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagPost'
type Repository_UntagPost_Call struct {
	*mock.Call
}

// UntagPost is a helper method to define mock.On call
//   - ctx context.Context
//   - postID int64
//   - tagNames []string
func (_e *Repository_Expecter) UntagPost(ctx interface{}, postID interface{}, tagNames interface{}) *Repository_UntagPost_Call {
	return &Repository_UntagPost_Call{Call: _e.mock.On("UntagPost", ctx, postID, tagNames)}
}

func (_c *Repository_UntagPost_Call) Run(run func(ctx context.Context, postID int64, tagNames []string)) *Repository_UntagPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]string))
	})
	return _c
}

func (_c *Repository_UntagPost_Call) Return(_a0 error) *Repository_UntagPost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UntagPost_Call) RunAndReturn(run func(context.Context, int64, []string) error) *Repository_UntagPost_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
